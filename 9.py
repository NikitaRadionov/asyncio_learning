import asyncio
from asyncio import Future

# "Будущие" объекты (Future Objects).
# Экземпляр класса Future.
# Смысл объекта класса Future заключается в избежании блокировки потока выполнения программы.
# Как мы знаем в Python каждая функция является блокирующей (вызов функции блокирует поток выполнения программы) и мы не сможем выполнить другой код, пока функция не отдаст нам какой-нибудь результат.
# Образно говоря, объект класса Future является "заглушкой", которую отдает нам функция. Мы хотим получить результат, но в этом объекте результата пока что может и не быть, он потом нам вернется асинхронно,
# как только он станет доступен.
# Все что было выше сказано, можно проигнорировать, и обратить внимание на главное:
# Экземпляр класса Future сначала не имеет внутри себя никакого значения (защищенный атрибут self._result не установлен)
# В процессе работы мы хотим чтобы внутри этого экземпляра класса установилось некоторое значение (появился защищенный атриубт self._result).
# Установить значение экземпляру класса Future можно с помощью его метода self.set_result() (self.set_result() добавляет экземпляру класса защищенный атрибут self._result)
# Получить значение экземпляра класса Future можно с помощью его метода self.result() (self.result() отдает self._result)
# Узнать получил ли объект класса Future результат можно с помощью его метода self.done() (self.done() вернет True, если у экземпляра появился атрибут self._result, False в противном случае)
# Вызов метода self.result() до вызова метода self.set_result() повлечет за собой исключение InvalidStateError (вызовите функцию main1() чтобы в этом убедиться).


def main():

    my_future = Future()

    print(f'my_future готов ? {my_future.done()}')

    my_future.set_result(42)

    print(f'my_future готов ? {my_future.done()}')

    print(f'Какой результат хранится в my_future ? {my_future.result()}')



def main1():

    my_future = Future()

    print(f'my_future готов ? {my_future.done()}')

    print(f'Какой результат хранится в my_future ? {my_future.result()}')

    my_future.set_result(42)

    print(f'my_future готов ? {my_future.done()}')

    print(f'Какой результат хранится в my_future ? {my_future.result()}')


if __name__ == "__main__":
    main()
    # main1()
