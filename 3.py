import asyncio

# Знакомство с задачами
# Задача - обертка вокруг сопрограммы, которая планирует выполнение последней в цикле событий как можно раньше.
# Планирование и выполнение происходят в неблокирующем режиме т.е создав задачу, мы можем сразу приступить к выполнению другого кода, пока эта задача работает в фоне (конкурентно).
# await же блокирует выполнение, т.е мы приостанавливаем всю сопрограммму на время, пока выражение await не вернет управление.

# Когда задача только что была создана, она находится в режиме ожидания.
# Что означает "выполнение задач планируется как можно раньше" ?
# Это означает вот что: в точке, где встречается первое после создания задачи предложение await, все ожидающие задачи начинают выполняться, так как await запускает очередную итерацию
# цикла событий.

async def delay(delay_seconds):
    print(f'Братишка, я пока подремлю, не обессуть, дорогой, {delay_seconds} сек')
    await asyncio.sleep(delay_seconds)
    print(f'Вааааайааа, асаламалекум !!')
    return "Че за тяги такие бархатные ? Уффф... Кефтеме !"

async def add_one(number: int) -> int:
    return number + 1


async def main():
    sleep_for_three = asyncio.create_task(delay(3))
    print(type(sleep_for_three)) # <class '_asyncio.Task'>
    result = await sleep_for_three
    print(result)


if __name__ == "__main__":
    asyncio.run(main())